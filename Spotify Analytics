--For this project, I downloaded Spotify data from Kaggle.
--Then I created a table to insert Spotify data into.
--Finally, I performed analytics on the data using SQL. 


--Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL
)

--Then I inserted the Spotify Data .csv into the table.

--Next, I explored the data using the following SQL. 

--Lets see the 10 longest songs
SELECT duration_ms, track_name
FROM Spotifydata
ORDER BY duration_ms DESC
LIMIT 10

--Which artists appear on the top 50 list more than once, and how many times?
SELECT COUNT(artist_name), artist_name
FROM Spotifydata
GROUP BY artist_name
ORDER BY COUNT(artist_name) DESC

--What is the popular song?
SELECT * 
FROM Spotifydata
ORDER BY popularity DESC
LIMIT 1

--What are the top 10 least wordy artists?
SELECT speechiness, artist_name
FROM Spotifydata
ORDER BY speechiness ASC
LIMIT 10

--In general, what range of tempo (speed of song) seems to be most popular?
SELECT ROUND(AVG(tempo)), popularity
FROM Spotifydata
GROUP BY popularity
ORDER BY popularity DESC

-finally, let's make a temporary table to assign the artists with the highest average popularity as "Top Stars"

WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
 
SELECT  artist_name,
        average_popularity,
        'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90
ORDER BY average_popularity DESC
